from .. import loader
import logging, asyncio, re

from telethon.tl.functions.channels import JoinChannelRequest
from telethon.errors.rpcerrorlist import UsernameNotOccupiedError
from enum import Enum

logger = logging.getLogger(__name__)


class Patterns(Enum):
    DELETED_ACTIVATED = re.compile(r'–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —á–µ–∫ —Å–Ω–æ–≤–∞|–ß–µ–∫ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω|–ß–µ–∫ —É–¥–∞–ª—ë–Ω')
    NOT_SUBSCRIBED = re.compile(r'–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Ç—Ä–µ–±—É–µ–º—ã—Ö –≥—Ä—É–ø–ø–∞—Ö –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —ç—Ç–æ–≥–æ —á–µ–∫–∞')
    NEED_PASSWORD = re.compile(r'–î–∞–Ω–Ω—ã–π —á–µ–∫ –∑–∞—â–∏—â—ë–Ω –ø–∞—Ä–æ–ª–µ–º, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ!')
    CHEQUE = re.compile(r'x–ß–µ–∫')
    WAIT = re.compile(r'Loading')
    SUCCESS = re.compile(r'/^–í—ã –ø–æ–ª—É—á–∏–ª–∏\s+(\d+(\.\d+)?)\s+([\S ]*?)\s*(\w+)?$/gm')
def parse(msg):
    for p in Patterns:
        if re.findall(p.value, msg):
            return p

def parse_value(m):
    mat = re.match(Patterns.SUCCESS.value, m)
    if mat:
        value = int(mat.group(1)) if mat.group(1).isnumeric() else float(mat.group(1))
        ticker = mat.group(4) or None
        return value, ticker

async def activate(code, client, ll, password=None):
    async with client.conversation('@xJetSwapBot') as c:
        await c.send_message(f'/start {code}')
        m = await c.get_response()
        stat = parse(m.message)

        if stat == Patterns.DELETED_ACTIVATED:
            if "‚ùå" in ll:
                logger.error('–ß–µ–∫ —É–¥–∞–ª—ë–Ω –∏–ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω')
            return

        if stat == Patterns.NOT_SUBSCRIBED:
            for b in m.buttons:
                if b[0].url:
                    try:
                        await client(JoinChannelRequest(b[0].url))
                        if "‚ÑπÔ∏è" in ll:
                            logger.info(f'–ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ {b[0].url}')
                    except ValueError:
                        if "‚ùå" in ll:
                            logger.error(f'–ö–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø–∞ {b[0].url} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
                        return
                else:
                    await b[0].click()
            m = await c.get_response()
            stat = parse(m.message)

        if stat == Patterns.NEED_PASSWORD:
            if password:
                await c.send_message(password)
                if "‚ÑπÔ∏è" in ll:
                    logger.info('–í–≤–µ–ª–∏ –ø–∞—Ä–æ–ª—å')
                m = await c.get_response()
                stat = parse(m.message)
            else:
                if "‚ö†Ô∏è" in ll:
                    logger.warning('–ù–µ–æ–±—Ö–æ–¥–∏–º –ø–∞—Ä–æ–ª—å, –Ω–æ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
                return

        if stat == Patterns.WAIT:
            while stat == Patterns.WAIT:
                if "‚ÑπÔ∏è" in ll:
                    logger.info('–û–∂–∏–¥–∞–µ–º —á–µ–∫ ...')
                m = await c.get_response()
                stat = parse(m.message)
                await asyncio.sleep(0.2)

        if stat == Patterns.CHEQUE:
            await m.buttons[0][0].click()
            if "‚ÑπÔ∏è" in ll:
                logger.info('–ù–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ ...')
            m = await c.get_response()
            stat = parse(m.message)

        if stat == Patterns.SUCCESS:
            if "‚úÖ" in ll:
                logger.info(f'–ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –ø–æ–ª—É—á–µ–Ω–æ {" ".join(parse_value(m.message))}')
            await m.delete()

@loader.tds
class sh_actxJetSwapModule(loader.Module):
    """–ê–∫—Ç–∏–≤–∞—Ç–æ—Ä —á–µ–∫–æ–≤ @xJetSwapBot"""
    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "Logging",
                ["‚úÖ"],
                "–í–µ–¥–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞",
                validator=loader.validators.MultiChoice(["‚ùå", "‚ö†Ô∏è", "‚úÖ", "‚ÑπÔ∏è"]),
            ),
        )
    strings = {
        "name": "sh_actxJetSwap",
    }
    async def client_ready(self, client, db):
        self.client = client
        await client.send_message('xJetSwapBot', '/start')

    async def watcher(self, message):
        if not message.__class__.__name__ == "Message":
            return
        if message.raw_text and 'https://t.me/xJetSwapBot?start=' in message.raw_text:
            if match := re.search(r'https://t\.me/xJetSwapBot\?start=(c_[A-Za-z0-9_/]+)', message.message):
                await activate(match.group(1), self.client, self.config["Logging"])
        elif message.buttons and message.buttons[0][0].url:
            if match := re.search(r'https://t\.me/xJetSwapBot\?start=(c_[A-Za-z0-9_/]+)', message.buttons[0][0].url):
                await activate(match.group(1), self.client, self.config["Logging"])

    async def checkactxJetcmd(self, message):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å"""
        await message.edit("<b>ü¶â–°–æ–≤–∏–Ω—ã–π –∞–∫—Ç–∏–≤–∞—Ç–æ—Ä —á–µ–∫–æ–≤ @xJetSwapBot —Ä–∞–±–æ—Ç–∞–µ—Ç!</b>")
